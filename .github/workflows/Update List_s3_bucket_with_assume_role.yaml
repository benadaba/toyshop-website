name: List S3 Bucket Contents With Assume Role

on:
  push:

  workflow_dispatch:
    inputs:
      creake_k8s_cluster:
        description: 'Choose whether or not provision eks cluster: install or delete'
        required: true
        default: 'none'
        type: choice
        options:
          - install
          - delete
          - both
          - none
      build_docker:
        description: 'Do you want to build a Docker image?'
        required: true
        default: 'no'
        type: choice
        options:
          - yes
          - no
      launch_ec2:
        description: 'Do you want to launch an EC2 instance?'
        required: true
        default: 'no'
        type: choice
        options:
          - yes
          - no
      deploy_app:
        description: 'Do you want to deploy the app to EKS?'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no

jobs:
  build-run-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

     #assume role to 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2  # Change this to your desired region
        # role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/s3_access_for_ec2s
        # role-session-name: github-actions-session
        # role-duration-seconds: 900

    - name: List S3 bucket contents
      run: |
        aws s3 ls 

    # - name: Create EC2 instance
    #   run: |
    #     aws ec2 run-instances --image-id ami-0fe310dde2a8fdc5c --count 1 --instance-type t2.micro --key-name April2024key1 --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GitHubActionEC2}]'

    - name: Log in to Docker Hub
      if: ${{ github.event.inputs.build_docker == 'yes' }}
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      if: ${{ github.event.inputs.build_docker == 'yes' }}
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/toyshop:gha

    # - name: Create Security Group
    #   id: sg
    #   run: |
    #     SG_ID=$(aws ec2 create-security-group --group-name my-sg-gha321 --description "My security group" --vpc-id ${{ secrets.AWS_VPC_ID }} --query 'GroupId' --output text)
    #     aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
    #     echo "::set-output name=sg_id::$SG_ID"

    # - name: Launch EC2 Instance
    #   id: ec2
    #   run: |
    #     INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0fe310dde2a8fdc5c --count 1 --instance-type t2.micro --key-name April2024key1 --security-group-ids ${{ steps.sg.outputs.sg_id }} --subnet-id ${{ secrets.AWS_SUBNET_ID }} --user-data file://user-data.txt --query 'Instances[0].InstanceId' --output text)
    #     echo "::set-output name=instance_id::$INSTANCE_ID".

    - name: Launch EC2 Instance
      if: ${{ github.event.inputs.launch_ec2 == 'yes' }}
      id: ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0fe310dde2a8fdc5c --count 1 --instance-type t2.micro --key-name ${{ secrets.AWS_KEYPAIR_NAME }}   --security-group-ids ${{ secrets.AWS_SECURITY_GROUP_ID }} --subnet-id ${{ secrets.AWS_SUBNET_ID }} --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GitHubActionEC2-DockerBuild}]' --user-data file://user-data.txt --query 'Instances[0].InstanceId' --output text)
        echo "::set-output name=instance_id::$INSTANCE_ID"

    - name: Wait for EC2 Instance to be running
      if: ${{ github.event.inputs.launch_ec2 == 'yes' }}
      run: |
        aws ec2 wait instance-running --instance-ids ${{ steps.ec2.outputs.instance_id }}

    - name: Get EC2 Public IP
      if: ${{ github.event.inputs.launch_ec2 == 'yes' }}
      id: ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Print Public IP
      if: ${{ github.event.inputs.launch_ec2 == 'yes' }}
      run: echo "Public IP address is -  ${{ steps.ip.outputs.public_ip }}"
    
    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin/

    - name: Add execution permission to the eks-install-file
      if: ${{ github.event.inputs.creake_k8s_cluster == 'install' || github.event.inputs.creake_k8s_cluster == 'both' }}
      run: chmod +x eks-install.sh

    - name: install k8s cluster
      if: ${{ github.event.inputs.creake_k8s_cluster == 'install' || github.event.inputs.creake_k8s_cluster == 'both' }}
      run: ./eks-install.sh

    - name: Wait for EKS Cluster to be ready
      if: ${{ github.event.inputs.creake_k8s_cluster == 'install' || github.event.inputs.creake_k8s_cluster == 'both' }}
      run: |
        echo "Waiting for EKS cluster to become active..."
        sleep 1200

      # Step 7: Verify Cluster is Running
    - name: Verify Kubernetes Cluster Status
      if: ${{ github.event.inputs.creake_k8s_cluster == 'install' || github.event.inputs.creake_k8s_cluster == 'both' }}
      run: |
        echo "Verifying if the Kubernetes cluster is accessible..."
        kubectl get nodes

     # Step 5: Setup Kubeconfig
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        export KUBECONFIG=$HOME/.kube/config

    - name: Delete EKS Cluster
      if: ${{ github.event.inputs.creake_k8s_cluster == 'delete' || github.event.inputs.creake_k8s_cluster == 'both' }}
      run: |
        eksctl delete cluster --name ghaCluster --region eu-west-2

    - name: Deploy App to EKS Cluster
      # if: ${{ github.event.inputs.deploy_app == 'yes' && github.event.inputs.creake_k8s_cluster != 'delete' }}
      run: |
        echo "Deploying app to EKS cluster..."
        kubectl apply -f deployment.yml
        kubectl apply -f service.yml
        echo "App and LoadBalancer deployed to EKS cluster successfully."

    - name: Get all objects
      if: ${{ github.event.inputs.deploy_app == 'yes' && github.event.inputs.creake_k8s_cluster != 'delete' }}
      run: |
        echo "Get objects in  EKS cluster..."
        kubectl get all

    
    


    